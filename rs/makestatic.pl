#!/usr/bin/perl -w
#
# Make static C data structures for route simulator
# Prices, etc.
#

use strict;
use FileHandle;
use Getopt::Std;

use dow;

use vars qw($opt_t $opt_v);

my($Turn, $Verbose, $MaxLineLength);

$Verbose = 1;	# Default verbosity
$MaxLineLength = 60;

getopts('vt:') or usage();

OpenDB();

if (defined($opt_t) && $opt_t =~ /^[0-9]+$/ && $opt_t != 0) {
    $Turn = $opt_t;
} else {
    $Turn = SelectOne("select max(turn) from turnupdate;");
}

if (defined($opt_v)) {
    $Verbose = !$Verbose;
}

pv("makestatic.pl on turn %d\n", $Turn);

GenerateStatic();
PrintPageData();

CloseDB();

sub GenerateStatic {
    my($sth, $row);
    add("/*\n * This file was generated by makestatic.pl on turn $Turn\n");
    add(" * ", `date`);
    add(" *\n */\n\n");

    add("#define NSTARS (" . SelectOne("select count(*) from starcoords;") .
	")\n\n");

    add("char* StarName[NSTARS] = {\n");
    add(CommaWrap(map { "\"$_\""} SelectAll("select system from starcoords order by system;")));
    add("\n};\n\n");

    add("int StarX[NSTARS] = {\n");
    add(CommaWrap(SelectAll("select x from starcoords order by system;")));
    add("\n};\n\n");

    add("int StarY[NSTARS] = {\n");
    add(CommaWrap(SelectAll("select y from starcoords order by system;")));
    add("\n};\n\n");

    add("#define NRES (" . SelectOne("select count(*) from factories;") . ")\n\n");

    add("char* ResName[NRES] = {\n");
    add(CommaWrap(map { "\"$_\""} SelectAll("select resource from factories order by resource;")));
    add("\n};\n\n");

    add("// Number of buyers at star system\nshort StarToNBuyers[NSTARS];\n\n");
    add("// Number of buyers of a resource\nshort ResToNBuyers[NRES];\n\n");
    add("BuyerType* StarToBuyers[NSTARS];\n\n");
    add("StarIndex* ResToBuyers[NRES];\n\n");

    # For each star
    #   For each resource
    #      Number of colonies buying (either 0, 1, or 2)
    add("char StarResToNBuyers[NSTARS][NRES] = {\n");
    
}

sub CommaWrap {
    my(@elems) = @_;
    my($str, $elem, $linelen, $el);
    $str = "  " . shift(@elems);
    $linelen = length($str);
    while ($#elems >= 0) {
	$elem = shift(@elems);
	$el = length($elem);
	if ($linelen+$el+2 > $MaxLineLength) {
	    $str .= ",\n  $elem";
	    $linelen = 2 + $el;
	} else {
	    $str .= ", $elem";
	    $linelen += 2 + $el;
	}
    }
    return $str;
}
    

# Print if Verbose
sub pv {
    my($str, @rest) = @_;
    if ($Verbose) {
	print STDERR sprintf($str, @rest);
    }
}
